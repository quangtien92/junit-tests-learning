import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import vn.edu.hust.student.dynamicpool.bll.model.Boundary;
import vn.edu.hust.student.dynamicpool.bll.model.Point;


public class BoundaryTest {
	Boundary container = null;
	@Before
	public void setUp() throws Exception {
		container = new Boundary(800, 480);
	}

	@Test
	public void testInside() {
		Boundary boundary = new Boundary(100, 80);
		assertFalse(boundary.isInside(container));
		Point location = boundary.getLocation();
		location.setLocation(-150, -150);
		assertFalse(boundary.isInside(container));
		location.setLocation(-150, 0);
		assertFalse(boundary.isInside(container));
		location.setLocation(-150, 10);
		assertFalse(boundary.isInside(container));
		location.setLocation(-150, 400);
		assertFalse(boundary.isInside(container));
		location.setLocation(-150, 410);
		assertFalse(boundary.isInside(container));
		location.setLocation(-150, 480);
		assertFalse(boundary.isInside(container));
		location.setLocation(-150, 580);
		assertFalse(boundary.isInside(container));
		location.setLocation(-100, -150);
		assertFalse(boundary.isInside(container));
		location.setLocation(-100, 0);
		assertFalse(boundary.isInside(container));
		location.setLocation(-100, 10);
		assertFalse(boundary.isInside(container));
		location.setLocation(-100, 400);
		assertFalse(boundary.isInside(container));
		location.setLocation(-100, 410);
		assertFalse(boundary.isInside(container));
		location.setLocation(-100, 480);
		assertFalse(boundary.isInside(container));
		location.setLocation(-100, 580);
		assertFalse(boundary.isInside(container));
		location.setLocation(-50, -150);
		assertFalse(boundary.isInside(container));
		location.setLocation(-50, 0);
		assertFalse(boundary.isInside(container));
		location.setLocation(-50, 10);
		assertFalse(boundary.isInside(container));
		location.setLocation(-50, 400);
		assertFalse(boundary.isInside(container));
		location.setLocation(-50, 410);
		assertFalse(boundary.isInside(container));
		location.setLocation(-50, 480);
		assertFalse(boundary.isInside(container));
		location.setLocation(-50, 580);
		assertFalse(boundary.isInside(container));
		location.setLocation(0, -150);
		assertFalse(boundary.isInside(container));
		location.setLocation(0, 0);
		assertFalse(boundary.isInside(container));
		location.setLocation(0, 10);
		assertFalse(boundary.isInside(container));
		location.setLocation(0, 400);
		assertFalse(boundary.isInside(container));
		location.setLocation(0, 410);
		assertFalse(boundary.isInside(container));
		location.setLocation(0, 480);
		assertFalse(boundary.isInside(container));
		location.setLocation(0, 580);
		assertFalse(boundary.isInside(container));
		location.setLocation(10, -150);
		assertFalse(boundary.isInside(container));
		location.setLocation(10, 0);
		assertFalse(boundary.isInside(container));
		location.setLocation(10, 10);
		assertTrue(boundary.isInside(container));
		location.setLocation(10, 400);
		assertFalse(boundary.isInside(container));
		location.setLocation(10, 410);
		assertFalse(boundary.isInside(container));
		location.setLocation(10, 480);
		assertFalse(boundary.isInside(container));
		location.setLocation(10, 580);
		assertFalse(boundary.isInside(container));
		location.setLocation(700, -150);
		assertFalse(boundary.isInside(container));
		location.setLocation(700, 0);
		assertFalse(boundary.isInside(container));
		location.setLocation(700, 10);
		assertFalse(boundary.isInside(container));
		location.setLocation(700, 400);
		assertFalse(boundary.isInside(container));
		location.setLocation(700, 410);
		assertFalse(boundary.isInside(container));
		location.setLocation(700, 480);
		assertFalse(boundary.isInside(container));
		location.setLocation(700, 580);
		assertFalse(boundary.isInside(container));
		location.setLocation(710, -150);
		assertFalse(boundary.isInside(container));
		location.setLocation(710, 0);
		assertFalse(boundary.isInside(container));
		location.setLocation(710, 10);
		assertFalse(boundary.isInside(container));
		location.setLocation(710, 400);
		assertFalse(boundary.isInside(container));
		location.setLocation(710, 410);
		assertFalse(boundary.isInside(container));
		location.setLocation(710, 480);
		assertFalse(boundary.isInside(container));
		location.setLocation(710, 580);
		assertFalse(boundary.isInside(container));
		location.setLocation(800, -150);
		assertFalse(boundary.isInside(container));
		location.setLocation(800, 0);
		assertFalse(boundary.isInside(container));
		location.setLocation(800, 10);
		assertFalse(boundary.isInside(container));
		location.setLocation(800, 400);
		assertFalse(boundary.isInside(container));
		location.setLocation(800, 410);
		assertFalse(boundary.isInside(container));
		location.setLocation(800, 480);
		assertFalse(boundary.isInside(container));
		location.setLocation(800, 580);
		assertFalse(boundary.isInside(container));
		location.setLocation(810, -150);
		assertFalse(boundary.isInside(container));
		location.setLocation(810, 0);
		assertFalse(boundary.isInside(container));
		location.setLocation(810, 10);
		assertFalse(boundary.isInside(container));
		location.setLocation(810, 400);
		assertFalse(boundary.isInside(container));
		location.setLocation(810, 410);
		assertFalse(boundary.isInside(container));
		location.setLocation(810, 480);
		assertFalse(boundary.isInside(container));
		location.setLocation(810, 580);
		assertFalse(boundary.isInside(container));
	}
	
	@Test
	public void testOutSide() {
		Boundary boundary = new Boundary(100, 80);
		assertFalse(boundary.isOutside(container));
		Point location = boundary.getLocation();
		location.setLocation(-150, -150);
		assertTrue(boundary.isOutside(container));
		location.setLocation(-150, 0);
		assertTrue(boundary.isOutside(container));
		location.setLocation(-150, 10);
		assertTrue(boundary.isOutside(container));
		location.setLocation(-150, 400);
		assertTrue(boundary.isOutside(container));
		location.setLocation(-150, 410);
		assertTrue(boundary.isOutside(container));
		location.setLocation(-150, 480);
		assertTrue(boundary.isOutside(container));
		location.setLocation(-150, 580);
		assertTrue(boundary.isOutside(container));
		location.setLocation(-100, -150);
		assertTrue(boundary.isOutside(container));
		location.setLocation(-100, 0);
		assertFalse(boundary.isOutside(container));
		location.setLocation(-100, 10);
		assertFalse(boundary.isOutside(container));
		location.setLocation(-100, 400);
		assertFalse(boundary.isOutside(container));
		location.setLocation(-100, 410);
		assertFalse(boundary.isOutside(container));
		location.setLocation(-100, 480);
		assertFalse(boundary.isOutside(container));
		location.setLocation(-100, 580);
		assertTrue(boundary.isOutside(container));
		location.setLocation(-50, -150);
		assertTrue(boundary.isOutside(container));
		location.setLocation(-50, 0);
		assertFalse(boundary.isOutside(container));
		location.setLocation(-50, 10);
		assertFalse(boundary.isOutside(container));
		location.setLocation(-50, 400);
		assertFalse(boundary.isOutside(container));
		location.setLocation(-50, 410);
		assertFalse(boundary.isOutside(container));
		location.setLocation(-50, 480);
		assertFalse(boundary.isOutside(container));
		location.setLocation(-50, 580);
		assertTrue(boundary.isOutside(container));
		location.setLocation(0, -150);
		assertTrue(boundary.isOutside(container));
		location.setLocation(0, 0);
		assertFalse(boundary.isOutside(container));
		location.setLocation(0, 10);
		assertFalse(boundary.isOutside(container));
		location.setLocation(0, 400);
		assertFalse(boundary.isOutside(container));
		location.setLocation(0, 410);
		assertFalse(boundary.isOutside(container));
		location.setLocation(0, 480);
		assertFalse(boundary.isOutside(container));
		location.setLocation(0, 580);
		assertTrue(boundary.isOutside(container));
		location.setLocation(10, -150);
		assertTrue(boundary.isOutside(container));
		location.setLocation(10, 0);
		assertFalse(boundary.isOutside(container));
		location.setLocation(10, 10);
		assertFalse(boundary.isOutside(container));
		location.setLocation(10, 400);
		assertFalse(boundary.isOutside(container));
		location.setLocation(10, 410);
		assertFalse(boundary.isOutside(container));
		location.setLocation(10, 480);
		assertFalse(boundary.isOutside(container));
		location.setLocation(10, 580);
		assertTrue(boundary.isOutside(container));
		location.setLocation(700, -150);
		assertTrue(boundary.isOutside(container));
		location.setLocation(700, 0);
		assertFalse(boundary.isOutside(container));
		location.setLocation(700, 10);
		assertFalse(boundary.isOutside(container));
		location.setLocation(700, 400);
		assertFalse(boundary.isOutside(container));
		location.setLocation(700, 410);
		assertFalse(boundary.isOutside(container));
		location.setLocation(700, 480);
		assertFalse(boundary.isOutside(container));
		location.setLocation(700, 580);
		assertTrue(boundary.isOutside(container));
		location.setLocation(710, -150);
		assertTrue(boundary.isOutside(container));
		location.setLocation(710, 0);
		assertFalse(boundary.isOutside(container));
		location.setLocation(710, 10);
		assertFalse(boundary.isOutside(container));
		location.setLocation(710, 400);
		assertFalse(boundary.isOutside(container));
		location.setLocation(710, 410);
		assertFalse(boundary.isOutside(container));
		location.setLocation(710, 480);
		assertFalse(boundary.isOutside(container));
		location.setLocation(710, 580);
		assertTrue(boundary.isOutside(container));
		location.setLocation(800, -150);
		assertTrue(boundary.isOutside(container));
		location.setLocation(800, 0);
		assertFalse(boundary.isOutside(container));
		location.setLocation(800, 10);
		assertFalse(boundary.isOutside(container));
		location.setLocation(800, 400);
		assertFalse(boundary.isOutside(container));
		location.setLocation(800, 410);
		assertFalse(boundary.isOutside(container));
		location.setLocation(800, 480);
		assertFalse(boundary.isOutside(container));
		location.setLocation(800, 580);
		assertTrue(boundary.isOutside(container));
		location.setLocation(810, -150);
		assertTrue(boundary.isOutside(container));
		location.setLocation(810, 0);
		assertTrue(boundary.isOutside(container));
		location.setLocation(810, 10);
		assertTrue(boundary.isOutside(container));
		location.setLocation(810, 400);
		assertTrue(boundary.isOutside(container));
		location.setLocation(810, 410);
		assertTrue(boundary.isOutside(container));
		location.setLocation(810, 480);
		assertTrue(boundary.isOutside(container));
		location.setLocation(810, 580);
		assertTrue(boundary.isOutside(container));
	}
	
	public void testPassing() {
		Boundary boundary = new Boundary(100, 80);
		assertTrue(boundary.isPassing(container));
		Point location = boundary.getLocation();
		location.setLocation(-150, -150);
		assertFalse(boundary.isPassing(container));
		location.setLocation(-150, 0);
		assertFalse(boundary.isPassing(container));
		location.setLocation(-150, 10);
		assertFalse(boundary.isPassing(container));
		location.setLocation(-150, 400);
		assertFalse(boundary.isPassing(container));
		location.setLocation(-150, 410);
		assertFalse(boundary.isPassing(container));
		location.setLocation(-150, 480);
		assertFalse(boundary.isPassing(container));
		location.setLocation(-150, 580);
		assertFalse(boundary.isPassing(container));
		location.setLocation(-100, -150);
		assertFalse(boundary.isPassing(container));
		location.setLocation(-100, 0);
		assertTrue(boundary.isPassing(container));
		location.setLocation(-100, 10);
		assertTrue(boundary.isPassing(container));
		location.setLocation(-100, 400);
		assertTrue(boundary.isPassing(container));
		location.setLocation(-100, 410);
		assertTrue(boundary.isPassing(container));
		location.setLocation(-100, 480);
		assertTrue(boundary.isPassing(container));
		location.setLocation(-100, 580);
		assertFalse(boundary.isPassing(container));
		location.setLocation(-50, -150);
		assertFalse(boundary.isPassing(container));
		location.setLocation(-50, 0);
		assertTrue(boundary.isPassing(container));
		location.setLocation(-50, 10);
		assertTrue(boundary.isPassing(container));
		location.setLocation(-50, 400);
		assertTrue(boundary.isPassing(container));
		location.setLocation(-50, 410);
		assertTrue(boundary.isPassing(container));
		location.setLocation(-50, 480);
		assertTrue(boundary.isPassing(container));
		location.setLocation(-50, 580);
		assertFalse(boundary.isPassing(container));
		location.setLocation(0, -150);
		assertFalse(boundary.isPassing(container));
		location.setLocation(0, 0);
		assertTrue(boundary.isPassing(container));
		location.setLocation(0, 10);
		assertTrue(boundary.isPassing(container));
		location.setLocation(0, 400);
		assertTrue(boundary.isPassing(container));
		location.setLocation(0, 410);
		assertTrue(boundary.isPassing(container));
		location.setLocation(0, 480);
		assertTrue(boundary.isPassing(container));
		location.setLocation(0, 580);
		assertFalse(boundary.isPassing(container));
		location.setLocation(10, -150);
		assertFalse(boundary.isPassing(container));
		location.setLocation(10, 0);
		assertTrue(boundary.isPassing(container));
		location.setLocation(10, 10);
		assertFalse(boundary.isPassing(container));
		location.setLocation(10, 400);
		assertTrue(boundary.isPassing(container));
		location.setLocation(10, 410);
		assertTrue(boundary.isPassing(container));
		location.setLocation(10, 480);
		assertTrue(boundary.isPassing(container));
		location.setLocation(10, 580);
		assertFalse(boundary.isPassing(container));
		location.setLocation(700, -150);
		assertFalse(boundary.isPassing(container));
		location.setLocation(700, 0);
		assertTrue(boundary.isPassing(container));
		location.setLocation(700, 10);
		assertTrue(boundary.isPassing(container));
		location.setLocation(700, 400);
		assertTrue(boundary.isPassing(container));
		location.setLocation(700, 410);
		assertTrue(boundary.isPassing(container));
		location.setLocation(700, 480);
		assertTrue(boundary.isPassing(container));
		location.setLocation(700, 580);
		assertFalse(boundary.isPassing(container));
		location.setLocation(710, -150);
		assertFalse(boundary.isPassing(container));
		location.setLocation(710, 0);
		assertTrue(boundary.isPassing(container));
		location.setLocation(710, 10);
		assertTrue(boundary.isPassing(container));
		location.setLocation(710, 400);
		assertTrue(boundary.isPassing(container));
		location.setLocation(710, 410);
		assertTrue(boundary.isPassing(container));
		location.setLocation(710, 480);
		assertTrue(boundary.isPassing(container));
		location.setLocation(710, 580);
		assertFalse(boundary.isPassing(container));
		location.setLocation(800, -150);
		assertFalse(boundary.isPassing(container));
		location.setLocation(800, 0);
		assertTrue(boundary.isPassing(container));
		location.setLocation(800, 10);
		assertTrue(boundary.isPassing(container));
		location.setLocation(800, 400);
		assertTrue(boundary.isPassing(container));
		location.setLocation(800, 410);
		assertTrue(boundary.isPassing(container));
		location.setLocation(800, 480);
		assertTrue(boundary.isPassing(container));
		location.setLocation(800, 580);
		assertFalse(boundary.isPassing(container));
		location.setLocation(810, -150);
		assertFalse(boundary.isPassing(container));
		location.setLocation(810, 0);
		assertFalse(boundary.isPassing(container));
		location.setLocation(810, 10);
		assertFalse(boundary.isPassing(container));
		location.setLocation(810, 400);
		assertFalse(boundary.isPassing(container));
		location.setLocation(810, 410);
		assertFalse(boundary.isPassing(container));
		location.setLocation(810, 480);
		assertFalse(boundary.isPassing(container));
		location.setLocation(810, 580);
		assertFalse(boundary.isPassing(container));
	}
}
